/*
 * generated by Xtext 2.15.0
 */
package com.modelsolv.reprezen.restapi.xtext.ui

import com.google.inject.Binder
import com.modelsolv.reprezen.restapi.xtext.ui.contentassist.RepreZenContentAssistContextFactory
import com.modelsolv.reprezen.restapi.xtext.ui.contentassist.RepreZenContentAssistParser
import com.modelsolv.reprezen.restapi.xtext.ui.contentassist.RepreZenLastSegmentFinder
import com.modelsolv.reprezen.restapi.xtext.ui.editor.AutoEditStrategyWOMultilineCommentProvider
import com.modelsolv.reprezen.restapi.xtext.ui.editor.RepreZenXtextEditor
import com.modelsolv.reprezen.restapi.xtext.ui.editor.templates.RepreZenTemplateProposalProvider
import com.modelsolv.reprezen.restapi.xtext.ui.formatting.RepreZenContentFormatterFactory
import com.modelsolv.reprezen.restapi.xtext.ui.hover.RepreZenEObjectHoverProvider
import com.modelsolv.reprezen.restapi.xtext.ui.hover.ZenApiEObjectHover
import com.modelsolv.reprezen.restapi.xtext.ui.internal.RepreZenSourceViewerFactory
import com.modelsolv.reprezen.restapi.xtext.ui.outline.HideDocumentationContribution
import com.modelsolv.reprezen.restapi.xtext.ui.outline.OutlineComparator
import com.modelsolv.reprezen.restapi.xtext.ui.outline.RepreZenOutlineNodeContentProvider
import com.modelsolv.reprezen.restapi.xtext.ui.outline.RepreZenQuickOutlineFilterAndSorter
import com.modelsolv.reprezen.restapi.xtext.ui.resource.RepreZenFoldingRegionProvider
import com.modelsolv.reprezen.restapi.xtext.ui.syntaxcoloring.RepreZenAntlrTokenToAttributeIdMapper
import com.modelsolv.reprezen.restapi.xtext.ui.syntaxcoloring.RepreZenHighlightingConfiguration
import com.modelsolv.reprezen.restapi.xtext.ui.syntaxcoloring.RepreZenSemanticHighlightingCalculator
import com.modelsolv.reprezen.restapi.xtext.ui.validation.RepreZenValidatorConfigurationBlock
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser
import org.eclipse.xtext.ui.editor.XtextEditor
import org.eclipse.xtext.ui.editor.XtextSourceViewer
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.FQNPrefixMatcher.LastSegmentFinder
import org.eclipse.xtext.ui.editor.contentassist.ITemplateProposalProvider
import org.eclipse.xtext.ui.editor.folding.IFoldingRegionProvider
import org.eclipse.xtext.ui.editor.formatting.IContentFormatterFactory
import org.eclipse.xtext.ui.editor.hover.IEObjectHover
import org.eclipse.xtext.ui.editor.hover.IEObjectHoverProvider
import org.eclipse.xtext.ui.editor.model.DocumentTokenSource
import org.eclipse.xtext.ui.editor.outline.actions.IOutlineContribution
import org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter.IComparator
import org.eclipse.xtext.ui.editor.outline.impl.OutlineNodeContentProvider
import org.eclipse.xtext.ui.editor.outline.quickoutline.QuickOutlineFilterAndSorter
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator
import org.eclipse.xtext.ui.validation.AbstractValidatorConfigurationBlock
import org.eclipse.ui.plugin.AbstractUIPlugin

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
class RapidMLUiModule extends AbstractRapidMLUiModule {

	override Class<? extends IEObjectHover> bindIEObjectHover() {
		return ZenApiEObjectHover
	}

	override Class<? extends AbstractEditStrategyProvider> bindAbstractEditStrategyProvider() {
		return AutoEditStrategyWOMultilineCommentProvider
	}

	def Class<? extends XtextEditor> bindXtextEditor() {
		return RepreZenXtextEditor
	}

	override Class<? extends IComparator> bindOutlineFilterAndSorter$IComparator() {
		return OutlineComparator
	}

	def void configureHideDocumentationContribution(Binder binder) {
		binder.bind(IOutlineContribution).to(HideDocumentationContribution)
	}

	def void configureQuickOutlineFilterAndSorter(Binder binder) {
		binder.bind(QuickOutlineFilterAndSorter).to(RepreZenQuickOutlineFilterAndSorter)
	}

	def void configureSourceViewerFactory(Binder binder) {
		binder.bind(XtextSourceViewer.Factory).to(RepreZenSourceViewerFactory)
	}

	def void configureOutlineNodeContentProvider(Binder binder) {
		binder.bind(OutlineNodeContentProvider).to(RepreZenOutlineNodeContentProvider)
	}

	def void configureEObjectHoverProvider(Binder binder) {
		binder.bind(IEObjectHoverProvider).to(RepreZenEObjectHoverProvider)
	}

	def void configureHighlightingConfiguration(Binder binder) {
		binder.bind(IHighlightingConfiguration).to(RepreZenHighlightingConfiguration)
	}

	def void configureSemanticHighlightingCalculator(Binder binder) {
		binder.bind(ISemanticHighlightingCalculator).to(RepreZenSemanticHighlightingCalculator)
	}

	def void configureAbstractAntlrTokenToAttributeIdMapper(Binder binder) {
		binder.bind(AbstractAntlrTokenToAttributeIdMapper).to(RepreZenAntlrTokenToAttributeIdMapper)
	}

	def void configureAbstractValidatorConfigurationBlock(Binder binder) {
		binder.bind(AbstractValidatorConfigurationBlock).to(RepreZenValidatorConfigurationBlock)
	}

	def void configureDocumentTokenSource(Binder binder) {
		binder.bind(DocumentTokenSource).to(RepreZenDocumentTokenSource)
	}

	override Class<? extends IContentFormatterFactory> bindIContentFormatterFactory() {
		return RepreZenContentFormatterFactory
	}

//	override Class<? extends ContentAssistContext.Factory> bindContentAssistContext$Factory() {		
//		return RepreZenContentAssistContextFactory
//	}

	override Class<? extends IContentAssistParser> bindIContentAssistParser() {
		return RepreZenContentAssistParser
	}

	override Class<? extends ITemplateProposalProvider> bindITemplateProposalProvider() {
		return RepreZenTemplateProposalProvider
	}

	def void configureLastSegmentFinder(Binder binder) {
		binder.bind(LastSegmentFinder).to(RepreZenLastSegmentFinder)
	}

	def void configureFoldingRegionProvider(Binder binder) {
		binder.bind(IFoldingRegionProvider).to(RepreZenFoldingRegionProvider)
	}

	override bindIResourceForEditorInputFactory() {
		return RepreZenResourceForIEditorInputFactory
	}

}
