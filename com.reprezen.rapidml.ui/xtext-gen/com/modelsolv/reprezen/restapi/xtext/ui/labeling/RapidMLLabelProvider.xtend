/*
 * generated by Xtext 2.15.0
 */
package com.modelsolv.reprezen.restapi.xtext.ui.labeling

import com.google.inject.Inject
import com.modelsolv.reprezen.restapi.AuthenticationMethod
import com.modelsolv.reprezen.restapi.CollectionResource
import com.modelsolv.reprezen.restapi.ImportDeclaration
import com.modelsolv.reprezen.restapi.LengthConstraint
import com.modelsolv.reprezen.restapi.MessageParameter
import com.modelsolv.reprezen.restapi.Method
import com.modelsolv.reprezen.restapi.ObjectRealization
import com.modelsolv.reprezen.restapi.ObjectResource
import com.modelsolv.reprezen.restapi.PropertyRealization
import com.modelsolv.reprezen.restapi.RealizationModelLocation
import com.modelsolv.reprezen.restapi.ReferenceEmbed
import com.modelsolv.reprezen.restapi.ReferenceLink
import com.modelsolv.reprezen.restapi.RegExConstraint
import com.modelsolv.reprezen.restapi.Structure
import com.modelsolv.reprezen.restapi.TemplateParameter
import com.modelsolv.reprezen.restapi.TypedRequest
import com.modelsolv.reprezen.restapi.TypedResponse
import com.modelsolv.reprezen.restapi.ValueRangeConstraint
import com.modelsolv.reprezen.restapi.datatypes.cardinality.OverrideCardinalities
import com.modelsolv.reprezen.restapi.util.ReferenceTreatmentUtils
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.EnumLiteralDeclaration
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.eclipse.xtext.util.Strings

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class RapidMLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def String text(ImportDeclaration importDecl) {
		var String alias = Strings::emptyIfNull(importDecl.getAlias())
		var String namespace = Strings::emptyIfNull(importDecl.getImportedNamespace())
		var String uri = Strings::emptyIfNull(importDecl.getImportURI())
		if (!Strings::isEmpty(alias) && !Strings::isEmpty(namespace)) {
			return '''«alias»: «namespace»'''.toString // $NON-NLS-1$
		}
		if (!Strings::isEmpty(alias)) {
			return alias
		}
		if (!Strings::isEmpty(namespace)) {
			return namespace
		}
		return uri
	}

	def String text(Method method) {
		return method.getHttpMethod().getName() +
			(if(method.getId() !== null) ''' «method.getId()»'''.toString else "" ) // $NON-NLS-1$ //$NON-NLS-2$
	}

	def String text(TypedRequest request) {
		return "Request" // $NON-NLS-1$
	}

	def String text(TypedResponse response) {
		return '''Response«(if (response.getStatusCode() !== -1) ''': «response.getStatusCode()»'''.toString else "" )»'''.
			toString // $NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$
	}

	def String text(TemplateParameter parameter) {
		return if(parameter.getUriSegment() !== null) parameter.getUriSegment().getName() else "<template parameter>" // $NON-NLS-1$
	}

	/** 
	 * @param element
	 * @return the label for the ReferenceLink based on its ReferencePropertyPath
	 */
	def String text(ReferenceLink element) {
		return if(element.getReferenceElement() !== null) ReferenceTreatmentUtils::getLabel(
			element.getReferenceElement()) else "<reference link>" // $NON-NLS-1$
	}

	def String text(ObjectRealization objectRealization) {
		return "<realization>"
	}

	def String text(PropertyRealization includedProperty) {
		return includedProperty.getBaseProperty().getName() +
			OverrideCardinalities::getOverrideCardinalities().getCardinality(includedProperty).getLabel()
	}

	def String text(ReferenceEmbed element) {
		return if(element.getReferenceElement() !== null) ReferenceTreatmentUtils::getLabel(
			element.getReferenceElement()) else "<reference embed>" // $NON-NLS-1$
	}

	def String text(EnumLiteralDeclaration enumLiteral) {
		return enumLiteral.getLiteral().getValue()
	}

	def String text(LengthConstraint element) {
		return "Length"
	}

	def String text(RegExConstraint element) {
		return "RegEx"
	}

	def String text(ValueRangeConstraint element) {
		return "ValueRange"
	}

	def String text(Keyword keyword) {
		return keyword.getValue()
	}

	def String text(AuthenticationMethod method) {
		return method.getScheme().getName()
	}

	def String text(RealizationModelLocation realizationLocation) {
		return "AutoRealization"
	}

	def String image(Method element) {
		return "method.png" // $NON-NLS-1$
	}

	def String image(Structure element) {
		return "dataType.png" // $NON-NLS-1$
	}

	def String image(ObjectResource element) {
		return "objectResource.png" // $NON-NLS-1$
	}

	def String image(CollectionResource element) {
		return "collectionResource.png" // $NON-NLS-1$
	}

	def String image(ReferenceLink element) {
		return "referenceLink.png" // $NON-NLS-1$
	}

	def String image(ReferenceEmbed element) {
		return "referenceEmbed.png" // $NON-NLS-1$
	}

	def String image(TypedRequest element) {
		return "request.png" // $NON-NLS-1$
	}

	def String image(MessageParameter element) {
		if (null !== element.eContainer()) {
			if (element.eContainer() instanceof TypedRequest) {
				return "queryParameter.png" // $NON-NLS-1$
			} else {
				return "headerParameter.png" // $NON-NLS-1$
			}
		}
		return null
	}

	def String image(TypedResponse element) {
		var int responseCode = element.getStatusCode()
		if (responseCode >= 100 && responseCode < 200) {
			return "response_informational.png" // $NON-NLS-1$
		} else if (responseCode >= 200 && responseCode < 300) {
			return "response_success.png" // $NON-NLS-1$
		} else if (responseCode >= 300 && responseCode < 400) {
			return "response_redirection.png" // $NON-NLS-1$
		} else if (responseCode >= 400 && responseCode < 500) {
			return "response_clientError.png" // $NON-NLS-1$
		} else if (responseCode >= 500 && responseCode < 600) {
			return "response_serverError.png" // $NON-NLS-1$
		}
		return "response.png" // $NON-NLS-1$
	}

	def String image(Keyword element) {
		// ZEN-2286 - Use consistent code assist icons between RAPID-ML & SwagEdit, update end user docs
		return "contentassist_keyword.png" // $NON-NLS-1$
	}
}
