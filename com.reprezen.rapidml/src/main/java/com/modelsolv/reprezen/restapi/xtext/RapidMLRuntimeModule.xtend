/*
 * generated by Xtext 2.15.0
 */
package com.modelsolv.reprezen.restapi.xtext

import com.google.inject.Binder
import com.google.inject.name.Names
import com.modelsolv.reprezen.restapi.xtext.conversion.RestTerminalConverters
import com.modelsolv.reprezen.restapi.xtext.formatting.RepreZenNodeModelStreamer
import com.modelsolv.reprezen.restapi.xtext.naming.RepreZenQualifiedNameConverter
import com.modelsolv.reprezen.restapi.xtext.parser.CustomSyntaxErrorMessageProvider
import com.modelsolv.reprezen.restapi.xtext.parser.RepreZenDslParser
import com.modelsolv.reprezen.restapi.xtext.resource.RepreZenLocationInFileProvider
import com.modelsolv.reprezen.restapi.xtext.scoping.ImportedNamespaceScopeProvider
import com.modelsolv.reprezen.restapi.xtext.scoping.RepreZenImportUriGlobalScopeProvider
import com.modelsolv.reprezen.restapi.xtext.validation.XtextDslResourceValidator
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.formatting.INodeModelStreamer
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.parser.IParser
import org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider
import org.eclipse.xtext.resource.ILocationInFileProvider
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.validation.IResourceValidator
import com.modelsolv.reprezen.restapi.xtext.serializers.RepreZenValueSerializer
import com.modelsolv.reprezen.restapi.xtext.naming.RepreZenDeclarativeQualifiedNameProvider
import org.eclipse.xtext.parsetree.reconstr.ITokenSerializer.IValueSerializer
import com.modelsolv.reprezen.restapi.xtext.loaders.RepreZenXtextResourceSet

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class RapidMLRuntimeModule extends AbstractRapidMLRuntimeModule {

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		return RestTerminalConverters
	}

	override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider).annotatedWith(
			Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
			ImportedNamespaceScopeProvider)
	}

	def Class<? extends ISyntaxErrorMessageProvider> bindISyntaxErrorMessageProvider() {
		return CustomSyntaxErrorMessageProvider
	}

	def Class<? extends IValueSerializer> bindIValueSerializer() {
		return RepreZenValueSerializer
	}

	def Class<? extends IResourceValidator> bindIResourceValidator() {
		return XtextDslResourceValidator
	}

	def Class<? extends INodeModelStreamer> bindINodeModelStreamer() {
		return RepreZenNodeModelStreamer
	}

	override Class<? extends IParser> bindIParser() {
		return RepreZenDslParser
	}

	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return RepreZenDeclarativeQualifiedNameProvider
	}

	override Class<? extends IScopeProvider> bindIScopeProvider() {
		return super.bindIScopeProvider()
	}

	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return RepreZenImportUriGlobalScopeProvider
	}

	override Class<? extends XtextResourceSet> bindXtextResourceSet() {
		return RepreZenXtextResourceSet
	}

	def void configureQualifiedNameConverter(Binder binder) {
		binder.bind(IQualifiedNameConverter).to(RepreZenQualifiedNameConverter)
	}

	override Class<? extends ILocationInFileProvider> bindILocationInFileProvider() {
		return RepreZenLocationInFileProvider
	}
}
