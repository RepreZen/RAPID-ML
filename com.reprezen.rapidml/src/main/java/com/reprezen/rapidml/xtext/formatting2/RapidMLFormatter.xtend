/*
 * generated by Xtext 2.9.2
 */
package com.reprezen.rapidml.xtext.formatting2

import com.google.inject.Inject
import com.reprezen.rapidml.AuthenticationMethod
import com.reprezen.rapidml.DataModel
import com.reprezen.rapidml.Extension
import com.reprezen.rapidml.ImportDeclaration
import com.reprezen.rapidml.LinkRelation
import com.reprezen.rapidml.MediaType
import com.reprezen.rapidml.RealizationModelLocation
import com.reprezen.rapidml.ResourceAPI
import com.reprezen.rapidml.ResourceDefinition
import com.reprezen.rapidml.ZenModel
import com.reprezen.rapidml.xtext.services.RapidMLGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class RapidMLFormatter extends AbstractFormatter2 {
	
	@Inject extension RapidMLGrammarAccess

	def dispatch void format(ZenModel zenModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ImportDeclaration imports : zenModel.getImports()) {
			imports.format;
		}
		zenModel.getDocumentation.format;
		for (Extension extensions : zenModel.getExtensions()) {
			extensions.format;
		}
		for (ResourceAPI resourceAPIs : zenModel.getResourceAPIs()) {
			resourceAPIs.format;
		}
		for (DataModel dataModels : zenModel.getDataModels()) {
			dataModels.format;
		}
		zenModel.getPrimitiveTypesLibrary.format;
		zenModel.getMediaTypesLibrary.format;
		zenModel.getLinkRelationsLibrary.format;
		zenModel.getSecuritySchemesLibrary.format;
	}

	def dispatch void format(ResourceAPI resourceAPI, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		resourceAPI.getDocumentation.format;
		for (AuthenticationMethod securedBy : resourceAPI.getSecuredBy()) {
			securedBy.format;
		}
		for (RealizationModelLocation autoRealizations : resourceAPI.getAutoRealizations()) {
			autoRealizations.format;
		}
		for (ResourceDefinition ownedResourceDefinitions : resourceAPI.getOwnedResourceDefinitions()) {
			ownedResourceDefinitions.format;
		}
		for (MediaType definedMediaTypes : resourceAPI.getDefinedMediaTypes()) {
			definedMediaTypes.format;
		}
		for (LinkRelation definedLinkRelations : resourceAPI.getDefinedLinkRelations()) {
			definedLinkRelations.format;
		}
		for (Extension extensions : resourceAPI.getExtensions()) {
			extensions.format;
		}
	}
	
	// TODO: implement for CollectionResource, ObjectResource, ObjectRealization, PropertyRealization, URI, MessageParameter, CollectionParameter, MatrixParameter, TemplateParameter, Method, TypedRequest, TypedResponse, ReferenceEmbed, ReferenceRealization, ReferenceLink, NamedLinkDescriptor, DataModel, Structure, ReferenceProperty, PrimitiveProperty, Enumeration, EnumConstant, UserDefinedType, PrimitiveTypesLibrary, Operation, MediaTypesLibrary, MediaType, LinkRelationsLibrary, LinkRelation, SecuritySchemeLibrary, SecurityScheme, SecurityScope, SecuritySchemeParameter
}
