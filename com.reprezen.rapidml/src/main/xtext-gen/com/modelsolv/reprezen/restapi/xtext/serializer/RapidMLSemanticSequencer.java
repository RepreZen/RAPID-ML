/*
 * generated by Xtext 2.9.2
 */
package com.modelsolv.reprezen.restapi.xtext.serializer;

import com.google.inject.Inject;
import com.modelsolv.reprezen.restapi.AuthenticationMethod;
import com.modelsolv.reprezen.restapi.CollectionParameter;
import com.modelsolv.reprezen.restapi.CollectionResource;
import com.modelsolv.reprezen.restapi.DataModel;
import com.modelsolv.reprezen.restapi.Documentation;
import com.modelsolv.reprezen.restapi.EnumConstant;
import com.modelsolv.reprezen.restapi.Enumeration;
import com.modelsolv.reprezen.restapi.Extension;
import com.modelsolv.reprezen.restapi.ExternalExample;
import com.modelsolv.reprezen.restapi.ImportDeclaration;
import com.modelsolv.reprezen.restapi.InlineDataExample;
import com.modelsolv.reprezen.restapi.InlineExample;
import com.modelsolv.reprezen.restapi.LengthConstraint;
import com.modelsolv.reprezen.restapi.LinkRelation;
import com.modelsolv.reprezen.restapi.LinkRelationsLibrary;
import com.modelsolv.reprezen.restapi.MatrixParameter;
import com.modelsolv.reprezen.restapi.MediaType;
import com.modelsolv.reprezen.restapi.MediaTypesLibrary;
import com.modelsolv.reprezen.restapi.MessageParameter;
import com.modelsolv.reprezen.restapi.Method;
import com.modelsolv.reprezen.restapi.NamedLinkDescriptor;
import com.modelsolv.reprezen.restapi.ObjectRealization;
import com.modelsolv.reprezen.restapi.ObjectResource;
import com.modelsolv.reprezen.restapi.Operation;
import com.modelsolv.reprezen.restapi.PrimitiveProperty;
import com.modelsolv.reprezen.restapi.PrimitiveType;
import com.modelsolv.reprezen.restapi.PrimitiveTypeSourceReference;
import com.modelsolv.reprezen.restapi.PrimitiveTypesLibrary;
import com.modelsolv.reprezen.restapi.PropertyRealization;
import com.modelsolv.reprezen.restapi.PropertyReference;
import com.modelsolv.reprezen.restapi.RealizationModelLocation;
import com.modelsolv.reprezen.restapi.ReferenceEmbed;
import com.modelsolv.reprezen.restapi.ReferenceLink;
import com.modelsolv.reprezen.restapi.ReferenceProperty;
import com.modelsolv.reprezen.restapi.ReferenceRealization;
import com.modelsolv.reprezen.restapi.RegExConstraint;
import com.modelsolv.reprezen.restapi.ResourceAPI;
import com.modelsolv.reprezen.restapi.RestapiPackage;
import com.modelsolv.reprezen.restapi.SecurityScheme;
import com.modelsolv.reprezen.restapi.SecuritySchemeLibrary;
import com.modelsolv.reprezen.restapi.SecuritySchemeParameter;
import com.modelsolv.reprezen.restapi.SecurityScope;
import com.modelsolv.reprezen.restapi.Structure;
import com.modelsolv.reprezen.restapi.TemplateParameter;
import com.modelsolv.reprezen.restapi.TypedRequest;
import com.modelsolv.reprezen.restapi.TypedResponse;
import com.modelsolv.reprezen.restapi.URI;
import com.modelsolv.reprezen.restapi.URISegment;
import com.modelsolv.reprezen.restapi.URISegmentWithParameter;
import com.modelsolv.reprezen.restapi.UserDefinedType;
import com.modelsolv.reprezen.restapi.ValueRangeConstraint;
import com.modelsolv.reprezen.restapi.ZenModel;
import com.modelsolv.reprezen.restapi.xtext.services.RapidMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RapidMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RapidMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestapiPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestapiPackage.AUTHENTICATION_METHOD:
				sequence_AuthenticationMethod(context, (AuthenticationMethod) semanticObject); 
				return; 
			case RestapiPackage.COLLECTION_PARAMETER:
				sequence_CollectionParameter(context, (CollectionParameter) semanticObject); 
				return; 
			case RestapiPackage.COLLECTION_RESOURCE:
				sequence_CollectionResource(context, (CollectionResource) semanticObject); 
				return; 
			case RestapiPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case RestapiPackage.DOCUMENTATION:
				if (rule == grammarAccess.getDocumentationRule()) {
					sequence_Documentation(context, (Documentation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModelDocumentationRule()) {
					sequence_ModelDocumentation(context, (Documentation) semanticObject); 
					return; 
				}
				else break;
			case RestapiPackage.ENUM_CONSTANT:
				sequence_EnumConstant(context, (EnumConstant) semanticObject); 
				return; 
			case RestapiPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case RestapiPackage.EXTENSION:
				sequence_Extension(context, (Extension) semanticObject); 
				return; 
			case RestapiPackage.EXTERNAL_EXAMPLE:
				sequence_ExternalExample(context, (ExternalExample) semanticObject); 
				return; 
			case RestapiPackage.IMPORT_DECLARATION:
				sequence_Import(context, (ImportDeclaration) semanticObject); 
				return; 
			case RestapiPackage.INLINE_DATA_EXAMPLE:
				sequence_InlineDataExample(context, (InlineDataExample) semanticObject); 
				return; 
			case RestapiPackage.INLINE_EXAMPLE:
				sequence_InlineExample(context, (InlineExample) semanticObject); 
				return; 
			case RestapiPackage.LENGTH_CONSTRAINT:
				sequence_LengthConstraint(context, (LengthConstraint) semanticObject); 
				return; 
			case RestapiPackage.LINK_RELATION:
				sequence_LinkRelation(context, (LinkRelation) semanticObject); 
				return; 
			case RestapiPackage.LINK_RELATIONS_LIBRARY:
				sequence_LinkRelationsLibrary(context, (LinkRelationsLibrary) semanticObject); 
				return; 
			case RestapiPackage.MATRIX_PARAMETER:
				sequence_MatrixParameter(context, (MatrixParameter) semanticObject); 
				return; 
			case RestapiPackage.MEDIA_TYPE:
				sequence_MediaType(context, (MediaType) semanticObject); 
				return; 
			case RestapiPackage.MEDIA_TYPES_LIBRARY:
				sequence_MediaTypesLibrary(context, (MediaTypesLibrary) semanticObject); 
				return; 
			case RestapiPackage.MESSAGE_PARAMETER:
				sequence_MessageParameter(context, (MessageParameter) semanticObject); 
				return; 
			case RestapiPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case RestapiPackage.NAMED_LINK_DESCRIPTOR:
				sequence_NamedLinkDescriptor(context, (NamedLinkDescriptor) semanticObject); 
				return; 
			case RestapiPackage.OBJECT_REALIZATION:
				if (rule == grammarAccess.getAnonimousLinkDescriptorRule()) {
					sequence_AnonimousLinkDescriptor(context, (ObjectRealization) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIncludedPropertiesRule()) {
					sequence_IncludedProperties(context, (ObjectRealization) semanticObject); 
					return; 
				}
				else break;
			case RestapiPackage.OBJECT_RESOURCE:
				sequence_ObjectResource(context, (ObjectResource) semanticObject); 
				return; 
			case RestapiPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case RestapiPackage.PRIMITIVE_PROPERTY:
				sequence_PrimitiveProperty(context, (PrimitiveProperty) semanticObject); 
				return; 
			case RestapiPackage.PRIMITIVE_TYPE:
				sequence_PrimitiveType(context, (PrimitiveType) semanticObject); 
				return; 
			case RestapiPackage.PRIMITIVE_TYPE_SOURCE_REFERENCE:
				sequence_PrimitiveTypeSourceReference(context, (PrimitiveTypeSourceReference) semanticObject); 
				return; 
			case RestapiPackage.PRIMITIVE_TYPES_LIBRARY:
				sequence_PrimitiveTypesLibrary(context, (PrimitiveTypesLibrary) semanticObject); 
				return; 
			case RestapiPackage.PROPERTY_REALIZATION:
				sequence_PropertyRealization(context, (PropertyRealization) semanticObject); 
				return; 
			case RestapiPackage.PROPERTY_REFERENCE:
				sequence_PropertyReference(context, (PropertyReference) semanticObject); 
				return; 
			case RestapiPackage.REALIZATION_MODEL_LOCATION:
				sequence_RealizationModelLocation(context, (RealizationModelLocation) semanticObject); 
				return; 
			case RestapiPackage.REFERENCE_EMBED:
				sequence_ReferenceEmbed(context, (ReferenceEmbed) semanticObject); 
				return; 
			case RestapiPackage.REFERENCE_LINK:
				sequence_ReferenceLink(context, (ReferenceLink) semanticObject); 
				return; 
			case RestapiPackage.REFERENCE_PROPERTY:
				sequence_ReferenceProperty(context, (ReferenceProperty) semanticObject); 
				return; 
			case RestapiPackage.REFERENCE_REALIZATION:
				if (rule == grammarAccess.getReferenceEmbedRealizationRule()) {
					sequence_ReferenceEmbedRealization(context, (ReferenceRealization) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReferenceLinkRealizationRule()) {
					sequence_ReferenceLinkRealization(context, (ReferenceRealization) semanticObject); 
					return; 
				}
				else break;
			case RestapiPackage.REG_EX_CONSTRAINT:
				sequence_RegExConstraint(context, (RegExConstraint) semanticObject); 
				return; 
			case RestapiPackage.RESOURCE_API:
				sequence_ResourceAPI(context, (ResourceAPI) semanticObject); 
				return; 
			case RestapiPackage.SECURITY_SCHEME:
				sequence_SecurityScheme(context, (SecurityScheme) semanticObject); 
				return; 
			case RestapiPackage.SECURITY_SCHEME_LIBRARY:
				sequence_SecuritySchemeLibrary(context, (SecuritySchemeLibrary) semanticObject); 
				return; 
			case RestapiPackage.SECURITY_SCHEME_PARAMETER:
				sequence_SecuritySchemeParameter(context, (SecuritySchemeParameter) semanticObject); 
				return; 
			case RestapiPackage.SECURITY_SCOPE:
				sequence_SecurityScope(context, (SecurityScope) semanticObject); 
				return; 
			case RestapiPackage.STRUCTURE:
				sequence_Structure(context, (Structure) semanticObject); 
				return; 
			case RestapiPackage.TEMPLATE_PARAMETER:
				sequence_TemplateParameter(context, (TemplateParameter) semanticObject); 
				return; 
			case RestapiPackage.TYPED_REQUEST:
				sequence_TypedRequest(context, (TypedRequest) semanticObject); 
				return; 
			case RestapiPackage.TYPED_RESPONSE:
				if (rule == grammarAccess.getTypedErrorResponseRule()) {
					sequence_TypedErrorResponse(context, (TypedResponse) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypedResponseRule()) {
					sequence_TypedResponse(context, (TypedResponse) semanticObject); 
					return; 
				}
				else break;
			case RestapiPackage.URI:
				sequence_URI(context, (URI) semanticObject); 
				return; 
			case RestapiPackage.URI_SEGMENT:
				sequence_URISegment(context, (URISegment) semanticObject); 
				return; 
			case RestapiPackage.URI_SEGMENT_WITH_PARAMETER:
				sequence_URISegmentWithParameter(context, (URISegmentWithParameter) semanticObject); 
				return; 
			case RestapiPackage.USER_DEFINED_TYPE:
				sequence_UserDefinedType(context, (UserDefinedType) semanticObject); 
				return; 
			case RestapiPackage.VALUE_RANGE_CONSTRAINT:
				sequence_ValueRangeConstraint(context, (ValueRangeConstraint) semanticObject); 
				return; 
			case RestapiPackage.ZEN_MODEL:
				sequence_ZenModel(context, (ZenModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnonimousLinkDescriptor returns ObjectRealization
	 *
	 * Constraint:
	 *     (exclusivePropertyList+=PropertyRealization exclusivePropertyList+=PropertyRealization*)?
	 */
	protected void sequence_AnonimousLinkDescriptor(ISerializationContext context, ObjectRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AuthenticationMethod returns AuthenticationMethod
	 *
	 * Constraint:
	 *     (scheme=[SecurityScheme|QualifiedName] (scopes+=[SecurityScope|QualifiedName] scopes+=[SecurityScope|QualifiedName]*)?)
	 */
	protected void sequence_AuthenticationMethod(ISerializationContext context, AuthenticationMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CollectionParameter returns CollectionParameter
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         required?='required'? 
	 *         name=EString 
	 *         sourceReference=SourceReference 
	 *         (default=STRING | fixed=STRING)* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_CollectionParameter(ISerializationContext context, CollectionParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResourceDefinition returns CollectionResource
	 *     CollectionResource returns CollectionResource
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         default?='default'? 
	 *         name=EString 
	 *         dataType=[Structure|QualifiedName] 
	 *         URI=URI? 
	 *         securedBy+=AuthenticationMethod* 
	 *         (
	 *             (
	 *                 collectionParameters+=CollectionParameter | 
	 *                 inlineObjectRealization=IncludedProperties | 
	 *                 referenceTreatments+=ReferenceTreatment | 
	 *                 definedLinkDescriptors+=NamedLinkDescriptor | 
	 *                 methods+=Method | 
	 *                 examples+=Example
	 *             )? 
	 *             (mediaTypes+=[MediaType|MediaTypeQualifier] mediaTypes+=[MediaType|MediaTypeQualifier]*)?
	 *         )+ 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_CollectionResource(ISerializationContext context, CollectionResource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataModel returns DataModel
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=ID title=STRING? ownedDataTypes+=DataType*)
	 */
	protected void sequence_DataModel(ISerializationContext context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Documentation returns Documentation
	 *
	 * Constraint:
	 *     text=JAVADOC_COMMENT
	 */
	protected void sequence_Documentation(ISerializationContext context, Documentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.DOCUMENTATION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.DOCUMENTATION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDocumentationAccess().getTextJAVADOC_COMMENTTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnumConstant returns EnumConstant
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=EString (integerValue=EInt | literalValue=STRING)?)
	 */
	protected void sequence_EnumConstant(ISerializationContext context, EnumConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Enumeration
	 *     SingleValueType returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (documentation=Documentation? baseType=[PrimitiveType|EString] name=ID enumConstants+=EnumConstant* extensions+=Extension*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Extension
	 *
	 * Constraint:
	 *     (name=ExtensionName (value=EString | value=RICH_TEXT))
	 */
	protected void sequence_Extension(ISerializationContext context, Extension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Example returns ExternalExample
	 *     ExternalExample returns ExternalExample
	 *
	 * Constraint:
	 *     path=EString
	 */
	protected void sequence_ExternalExample(ISerializationContext context, ExternalExample semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.EXTERNAL_EXAMPLE__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.EXTERNAL_EXAMPLE__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExternalExampleAccess().getPathEStringParserRuleCall_3_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns ImportDeclaration
	 *
	 * Constraint:
	 *     (importedNamespace=QualifiedName importURI=STRING alias=ID?)
	 */
	protected void sequence_Import(ISerializationContext context, ImportDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IncludedProperties returns ObjectRealization
	 *
	 * Constraint:
	 *     (
	 *         (exclusivePropertyList+=PropertyRealization exclusivePropertyList+=PropertyRealization*) | 
	 *         (
	 *             (overriddenPropertyList+=PropertyRealization overriddenPropertyList+=PropertyRealization*)? 
	 *             (excludedProperties+=[Feature|FeatureName] excludedProperties+=[Feature|FeatureName]*)?
	 *         )
	 *     )?
	 */
	protected void sequence_IncludedProperties(ISerializationContext context, ObjectRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataExample returns InlineDataExample
	 *     InlineDataExample returns InlineDataExample
	 *
	 * Constraint:
	 *     body=RICH_TEXT
	 */
	protected void sequence_InlineDataExample(ISerializationContext context, InlineDataExample semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.INLINE_DATA_EXAMPLE__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.INLINE_DATA_EXAMPLE__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInlineDataExampleAccess().getBodyRICH_TEXTTerminalRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Example returns InlineExample
	 *     InlineExample returns InlineExample
	 *
	 * Constraint:
	 *     body=RICH_TEXT
	 */
	protected void sequence_InlineExample(ISerializationContext context, InlineExample semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.INLINE_EXAMPLE__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.INLINE_EXAMPLE__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInlineExampleAccess().getBodyRICH_TEXTTerminalRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns LengthConstraint
	 *     LengthConstraint returns LengthConstraint
	 *
	 * Constraint:
	 *     ((minLength=EInt? maxLength=EInt?) | length=EInt)?
	 */
	protected void sequence_LengthConstraint(ISerializationContext context, LengthConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkRelation returns LinkRelation
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=LinkRelationName specURL=STRING?)
	 */
	protected void sequence_LinkRelation(ISerializationContext context, LinkRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LinkRelationsLibrary returns LinkRelationsLibrary
	 *
	 * Constraint:
	 *     (name=ID? definedLinkRelations+=LinkRelation*)
	 */
	protected void sequence_LinkRelationsLibrary(ISerializationContext context, LinkRelationsLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URIParameter returns MatrixParameter
	 *     MatrixParameter returns MatrixParameter
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         required?='required'? 
	 *         name=EString 
	 *         sourceReference=PropertyReference 
	 *         (default=STRING | fixed=STRING)* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_MatrixParameter(ISerializationContext context, MatrixParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MediaType returns MediaType
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         name=MediaTypeQualifier 
	 *         specURL=STRING? 
	 *         (derivedFrom+=[MediaType|MediaTypeQualifier] derivedFrom+=[MediaType|MediaTypeQualifier]*)? 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_MediaType(ISerializationContext context, MediaType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MediaTypesLibrary returns MediaTypesLibrary
	 *
	 * Constraint:
	 *     mediaTypes+=MediaType*
	 */
	protected void sequence_MediaTypesLibrary(ISerializationContext context, MediaTypesLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageParameter returns MessageParameter
	 *     AuthParameter returns MessageParameter
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         required?='required'? 
	 *         name=EString 
	 *         sourceReference=SourceReference 
	 *         httpLocation=HttpMessageParameterLocation? 
	 *         (default=STRING | fixed=STRING)* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_MessageParameter(ISerializationContext context, MessageParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         httpMethod=HTTPMethods 
	 *         id=ID? 
	 *         securedBy+=AuthenticationMethod* 
	 *         request=TypedRequest? 
	 *         responses+=TypedResponse* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelDocumentation returns Documentation
	 *
	 * Constraint:
	 *     text=JAVADOC_COMMENT
	 */
	protected void sequence_ModelDocumentation(ISerializationContext context, Documentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.DOCUMENTATION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.DOCUMENTATION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelDocumentationAccess().getTextJAVADOC_COMMENTTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedLinkDescriptor returns NamedLinkDescriptor
	 *
	 * Constraint:
	 *     (default?='default'? name=EString (exclusivePropertyList+=PropertyRealization exclusivePropertyList+=PropertyRealization*)?)
	 */
	protected void sequence_NamedLinkDescriptor(ISerializationContext context, NamedLinkDescriptor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResourceDefinition returns ObjectResource
	 *     ObjectResource returns ObjectResource
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         default?='default'? 
	 *         name=EString 
	 *         dataType=[Structure|QualifiedName] 
	 *         URI=URI? 
	 *         securedBy+=AuthenticationMethod* 
	 *         (
	 *             (
	 *                 inlineObjectRealization=IncludedProperties | 
	 *                 referenceTreatments+=ReferenceTreatment | 
	 *                 definedLinkDescriptors+=NamedLinkDescriptor | 
	 *                 methods+=Method | 
	 *                 examples+=Example
	 *             )? 
	 *             (mediaTypes+=[MediaType|MediaTypeQualifier] mediaTypes+=[MediaType|MediaTypeQualifier]*)?
	 *         )+ 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_ObjectResource(ISerializationContext context, ObjectResource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=EString)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns PrimitiveProperty
	 *     PrimitiveProperty returns PrimitiveProperty
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         restriction?='restrict'? 
	 *         name=FeatureName 
	 *         readOnly?='readOnly'? 
	 *         key?='key'? 
	 *         type=[SingleValueType|QualifiedName] 
	 *         cardinality=Cardinality? 
	 *         constraints+=Constraint* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_PrimitiveProperty(ISerializationContext context, PrimitiveProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceReference returns PrimitiveTypeSourceReference
	 *     PrimitiveTypeSourceReference returns PrimitiveTypeSourceReference
	 *
	 * Constraint:
	 *     simpleType=[PrimitiveType|ID]
	 */
	protected void sequence_PrimitiveTypeSourceReference(ISerializationContext context, PrimitiveTypeSourceReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.PRIMITIVE_TYPE_SOURCE_REFERENCE__SIMPLE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.PRIMITIVE_TYPE_SOURCE_REFERENCE__SIMPLE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveTypeSourceReferenceAccess().getSimpleTypePrimitiveTypeIDTerminalRuleCall_3_0_1(), semanticObject.getSimpleType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleType returns PrimitiveType
	 *     PrimitiveType returns PrimitiveType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PrimitiveType(ISerializationContext context, PrimitiveType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.DATA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.DATA_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveTypesLibrary returns PrimitiveTypesLibrary
	 *
	 * Constraint:
	 *     (name=ID primitiveTypes+=PrimitiveType*)
	 */
	protected void sequence_PrimitiveTypesLibrary(ISerializationContext context, PrimitiveTypesLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyRealization returns PropertyRealization
	 *
	 * Constraint:
	 *     (baseProperty=[Feature|FeatureName] cardinality=CardinalityOverride? constraints+=Constraint*)
	 */
	protected void sequence_PropertyRealization(ISerializationContext context, PropertyRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceReference returns PropertyReference
	 *     PropertyReference returns PropertyReference
	 *
	 * Constraint:
	 *     conceptualFeature=[PrimitiveProperty|FeatureName]
	 */
	protected void sequence_PropertyReference(ISerializationContext context, PropertyReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.PROPERTY_REFERENCE__CONCEPTUAL_FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.PROPERTY_REFERENCE__CONCEPTUAL_FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyReferenceAccess().getConceptualFeaturePrimitivePropertyFeatureNameParserRuleCall_3_0_1(), semanticObject.getConceptualFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RealizationModelLocation returns RealizationModelLocation
	 *
	 * Constraint:
	 *     uri=STRING
	 */
	protected void sequence_RealizationModelLocation(ISerializationContext context, RealizationModelLocation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.REALIZATION_MODEL_LOCATION__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.REALIZATION_MODEL_LOCATION__URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRealizationModelLocationAccess().getUriSTRINGTerminalRuleCall_2_0(), semanticObject.getUri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceEmbedRealization returns ReferenceRealization
	 *
	 * Constraint:
	 *     (inlineObjectRealization=AnonimousLinkDescriptor? referenceTreatments+=ReferenceTreatment*)
	 */
	protected void sequence_ReferenceEmbedRealization(ISerializationContext context, ReferenceRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceTreatment returns ReferenceEmbed
	 *     ReferenceEmbed returns ReferenceEmbed
	 *
	 * Constraint:
	 *     (referenceElement=[ReferenceElement|FeatureName] (ownedReferenceRealization=ReferenceEmbedRealization extensions+=Extension*)?)
	 */
	protected void sequence_ReferenceEmbed(ISerializationContext context, ReferenceEmbed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceLinkRealization returns ReferenceRealization
	 *
	 * Constraint:
	 *     (
	 *         targetResource=[ResourceDefinition|QualifiedName] 
	 *         (inlineObjectRealization=AnonimousLinkDescriptor | properties=[NamedLinkDescriptor|QualifiedName])?
	 *     )
	 */
	protected void sequence_ReferenceLinkRealization(ISerializationContext context, ReferenceRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReferenceTreatment returns ReferenceLink
	 *     ReferenceLink returns ReferenceLink
	 *
	 * Constraint:
	 *     (
	 *         referenceElement=[ReferenceElement|FeatureName] 
	 *         (ownedReferenceRealization=ReferenceLinkRealization linkRelation=[LinkRelation|EString]? extensions+=Extension*)?
	 *     )
	 */
	protected void sequence_ReferenceLink(ISerializationContext context, ReferenceLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns ReferenceProperty
	 *     ReferenceProperty returns ReferenceProperty
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         restriction?='restrict'? 
	 *         name=FeatureName 
	 *         (containment?='containing' | container?='container')? 
	 *         type=[Structure|QualifiedName] 
	 *         cardinality=Cardinality? 
	 *         inverse=[ReferenceProperty|FeatureName]? 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_ReferenceProperty(ISerializationContext context, ReferenceProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns RegExConstraint
	 *     RegExConstraint returns RegExConstraint
	 *
	 * Constraint:
	 *     pattern=StringLiteral
	 */
	protected void sequence_RegExConstraint(ISerializationContext context, RegExConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.REG_EX_CONSTRAINT__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.REG_EX_CONSTRAINT__PATTERN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegExConstraintAccess().getPatternStringLiteralParserRuleCall_4_0(), semanticObject.getPattern());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ResourceAPI returns ResourceAPI
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         name=ID 
	 *         (version=STRING | baseURI=STRING)* 
	 *         title=STRING? 
	 *         securedBy+=AuthenticationMethod* 
	 *         autoRealizations+=RealizationModelLocation* 
	 *         ownedResourceDefinitions+=ResourceDefinition* 
	 *         definedMediaTypes+=MediaType* 
	 *         definedLinkRelations+=LinkRelation* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_ResourceAPI(ISerializationContext context, ResourceAPI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecuritySchemeLibrary returns SecuritySchemeLibrary
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=ID securitySchemes+=SecurityScheme*)
	 */
	protected void sequence_SecuritySchemeLibrary(ISerializationContext context, SecuritySchemeLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecuritySchemeParameter returns SecuritySchemeParameter
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=ID value=EString)
	 */
	protected void sequence_SecuritySchemeParameter(ISerializationContext context, SecuritySchemeParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecurityScheme returns SecurityScheme
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         name=ID 
	 *         type=AuthenticationType 
	 *         parameters+=AuthParameter* 
	 *         errorResponses+=TypedErrorResponse* 
	 *         scopes+=SecurityScope* 
	 *         flow=AuthenticationFlows? 
	 *         settings+=SecuritySchemeParameter* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_SecurityScheme(ISerializationContext context, SecurityScheme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SecurityScope returns SecurityScope
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=QualifiedName)
	 */
	protected void sequence_SecurityScope(ISerializationContext context, SecurityScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Structure returns Structure
	 *     DataType returns Structure
	 *     Inheritable returns Structure
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         name=EString 
	 *         (supertypes+=[Inheritable|QualifiedName] supertypes+=[Inheritable|QualifiedName]*)? 
	 *         ownedFeatures+=Feature* 
	 *         ownedOperations+=Operation* 
	 *         dataExamples+=DataExample* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_Structure(ISerializationContext context, Structure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URIParameter returns TemplateParameter
	 *     TemplateParameter returns TemplateParameter
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         required?='required'? 
	 *         uriSegment=[URISegmentWithParameter|EString] 
	 *         sourceReference=SourceReference 
	 *         (default=STRING | fixed=STRING)* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_TemplateParameter(ISerializationContext context, TemplateParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedErrorResponse returns TypedResponse
	 *
	 * Constraint:
	 *     (documentation=Documentation? statusCode=EInt)
	 */
	protected void sequence_TypedErrorResponse(ISerializationContext context, TypedResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedRequest returns TypedRequest
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         useParentTypeReference?='this'? 
	 *         (resourceType=[ResourceDefinition|QualifiedName] | dataType=[Structure|QualifiedName])? 
	 *         inlineObjectRealization=IncludedProperties? 
	 *         (
	 *             (
	 *                 referenceTreatments+=ReferenceTreatment | 
	 *                 (mediaTypes+=[MediaType|MediaTypeQualifier] mediaTypes+=[MediaType|MediaTypeQualifier]*) | 
	 *                 parameters+=MessageParameter | 
	 *                 examples+=Example
	 *             )? 
	 *             inlineObjectRealization=IncludedProperties?
	 *         )* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_TypedRequest(ISerializationContext context, TypedRequest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedResponse returns TypedResponse
	 *
	 * Constraint:
	 *     (
	 *         documentation=Documentation? 
	 *         useParentTypeReference?='this'? 
	 *         (resourceType=[ResourceDefinition|QualifiedName] | dataType=[Structure|QualifiedName])? 
	 *         statusCode=EInt? 
	 *         inlineObjectRealization=IncludedProperties? 
	 *         (
	 *             (
	 *                 referenceTreatments+=ReferenceTreatment | 
	 *                 (mediaTypes+=[MediaType|MediaTypeQualifier] mediaTypes+=[MediaType|MediaTypeQualifier]*) | 
	 *                 parameters+=MessageParameter | 
	 *                 examples+=Example
	 *             )? 
	 *             inlineObjectRealization=IncludedProperties?
	 *         )* 
	 *         extensions+=Extension*
	 *     )
	 */
	protected void sequence_TypedResponse(ISerializationContext context, TypedResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URISegmentWithParameter returns URISegmentWithParameter
	 *
	 * Constraint:
	 *     name=URISegmentRule
	 */
	protected void sequence_URISegmentWithParameter(ISerializationContext context, URISegmentWithParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.URI_SEGMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.URI_SEGMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURISegmentWithParameterAccess().getNameURISegmentRuleParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URISegment returns URISegment
	 *
	 * Constraint:
	 *     name=URISegmentRule
	 */
	protected void sequence_URISegment(ISerializationContext context, URISegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestapiPackage.Literals.URI_SEGMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestapiPackage.Literals.URI_SEGMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getURISegmentAccess().getNameURISegmentRuleParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     URI returns URI
	 *
	 * Constraint:
	 *     (
	 *         (segments+=URISegment | segments+=URISegmentWithParameter) 
	 *         segments+=URISegment? 
	 *         (segments+=URISegmentWithParameter? segments+=URISegment?)* 
	 *         uriParameters+=URIParameter*
	 *     )
	 */
	protected void sequence_URI(ISerializationContext context, URI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns UserDefinedType
	 *     SingleValueType returns UserDefinedType
	 *     UserDefinedType returns UserDefinedType
	 *
	 * Constraint:
	 *     (documentation=Documentation? name=EString baseType=[SimpleType|QualifiedName] constraints+=Constraint* extensions+=Extension*)
	 */
	protected void sequence_UserDefinedType(ISerializationContext context, UserDefinedType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns ValueRangeConstraint
	 *     ValueRangeConstraint returns ValueRangeConstraint
	 *
	 * Constraint:
	 *     ((minValue=NumericValue minValueExclusive?='exclusive'?)? (maxValue=NumericValue maxValueExclusive?='exclusive'?)?)
	 */
	protected void sequence_ValueRangeConstraint(ISerializationContext context, ValueRangeConstraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ZenModel returns ZenModel
	 *
	 * Constraint:
	 *     (
	 *         namespace=QualifiedName? 
	 *         imports+=Import* 
	 *         documentation=ModelDocumentation? 
	 *         name=ID 
	 *         title=STRING? 
	 *         extensions+=Extension* 
	 *         resourceAPIs+=ResourceAPI* 
	 *         dataModels+=DataModel* 
	 *         primitiveTypesLibrary=PrimitiveTypesLibrary? 
	 *         mediaTypesLibrary=MediaTypesLibrary? 
	 *         linkRelationsLibrary=LinkRelationsLibrary? 
	 *         securitySchemesLibrary=SecuritySchemeLibrary?
	 *     )
	 */
	protected void sequence_ZenModel(ISerializationContext context, ZenModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
