/*
 * generated by Xtext 2.15.0
 */
package com.modelsolv.reprezen.restapi.xtext.tests

import com.google.inject.Inject
import com.modelsolv.reprezen.restapi.ZenModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import com.google.common.io.Resources
import java.nio.charset.Charset

@RunWith(XtextRunner)
@InjectWith(RapidMLInjectorProvider)
class RapidMLParsingTest {

	@Inject
	ParseHelper<ZenModel> parseHelper

	@Test
	def void testStructure() {
		val result = parseHelper.parse('''
		rapidModel TaxBlaster
			dataModel TaxBlasterDataModel
				structure TaxFiling
					many: string*
		''')
		
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.forEach [
			println(it.message + " " + it.line + " " + it.column)
		]
		Assert.assertTrue(errors.isEmpty)			
	}

	@Test
	def void loadModel() {		
		val result = parseHelper.parse(Resources.toString(
			Resources.getResource("TaxBlaster.rapid"),
			Charset.forName("UTF-8")
		))
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.forEach [
			println(it.message + " " + it.line + " " + it.column)
		]

		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
